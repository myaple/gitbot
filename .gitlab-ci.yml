# Use an official Rust image.
# See https://hub.docker.com/_/rust for available tags.
image: rust:1.86 # Using a recent stable version

variables:
  CARGO_TERM_COLOR: "always"
  # Assuming the binary name is 'gitbot' based on Cargo.toml package name
  # This should be consistent with the GITHUB_ENV in the GitHub Action
  BINARY_NAME: "gitbot" 

stages:
  - build_test
  - release

build_and_test_job:
  stage: build_test
  # Install clippy and rustfmt, as they might not be in all rust images by default
  # or to ensure specific versions if needed, though dtolnay/rust-toolchain handles this in GH.
  # For simplicity, we'll assume the base rust:1.86 image has recent enough versions or install them.
  before_script:
    - rustup component add clippy || true # Allow failure if already installed
    - rustup component add rustfmt || true # Allow failure if already installed
  script:
    - cargo build --verbose
    - cargo fmt -- --check
    - cargo clippy -- -D warnings # Fail on any warnings
    - cargo test --verbose
  cache:
    key:
      files:
        - Cargo.lock
    paths:
      - target/
      - /usr/local/cargo/registry/ # Path for cargo registry in official rust docker images
      - /usr/local/cargo/git/ # Path for cargo git sources in official rust docker images
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
    - if: '$CI_COMMIT_TAG =~ /^v.*/' # Run for tags starting with 'v'

build_release_binary:
  stage: release
  # Use the global rust image for building the binary
  script:
    - cargo build --release --verbose
    # Determine Asset Name and Path
    - |
      TAG_NAME="$CI_COMMIT_TAG"
      CLEAN_BINARY_NAME=$(echo "$BINARY_NAME" | tr -cd '[:alnum:]._-')
      ASSET_NAME="${CLEAN_BINARY_NAME}-${TAG_NAME}-linux-amd64.tar.gz" 
      echo "ASSET_NAME=${ASSET_NAME}"
      echo "RELEASE_TAG=${TAG_NAME}"
      # Package the release binary
      tar -czvf "${ASSET_NAME}" -C target/release "${BINARY_NAME}"
    # Upload the asset as a job artifact
    - mkdir -p release_assets
    - cp "${ASSET_NAME}" release_assets/
  artifacts:
    paths:
      - release_assets/
    expire_in: 1 week
  cache:
    key:
      files:
        - Cargo.lock
    paths:
      - target/
      - /usr/local/cargo/registry/
      - /usr/local/cargo/git/
    policy: pull
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v.*/' # Only run for tags starting with 'v'
  needs:
    - job: build_and_test_job
      artifacts: false

create_release:
  stage: release
  # Use GitLab's release-cli image which has the tool pre-installed
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - |
      TAG_NAME="$CI_COMMIT_TAG"
      CLEAN_BINARY_NAME=$(echo "$BINARY_NAME" | tr -cd '[:alnum:]._-')
      ASSET_NAME="${CLEAN_BINARY_NAME}-${TAG_NAME}-linux-amd64.tar.gz"
    - |
      # Create the release with the asset link
      # The asset will be available as a job artifact from the build_release_binary job
      release-cli create \
        --name "Release ${CI_COMMIT_TAG}" \
        --tag-name "${CI_COMMIT_TAG}" \
        --description "Release of ${BINARY_NAME} version ${CI_COMMIT_TAG}. See CHANGELOG.md for details (if available)." \
        --assets-link "{\"name\":\"${ASSET_NAME}\",\"url\":\"${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_REF_NAME}/raw/release_assets/${ASSET_NAME}?job=build_release_binary\"}"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v.*/' # Only run for tags starting with 'v'
  needs:
    - job: build_release_binary
      artifacts: true